local Settings = {
    Tracer_Thickness = 2,
}

local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera

local function NewLine(thickness, color)
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = color 
    line.Thickness = thickness
    line.Transparency = 1
    return line
end

local function Visibility(state, lib)
    for _, x in pairs(lib) do
        x.Visible = state
    end
end

local function ESP(plr)
    local library = {
        top = NewLine(Settings.Tracer_Thickness, Color3.new(1, 1, 1)),
        bottom = NewLine(Settings.Tracer_Thickness, Color3.new(1, 1, 1)),
        left = NewLine(Settings.Tracer_Thickness, Color3.new(1, 1, 1)),
        right = NewLine(Settings.Tracer_Thickness, Color3.new(1, 1, 1))
    }

    -- Función que cambia el color en base al nivel de vida
    local function UpdateColor(healthRatio)
        local color = Color3.fromRGB(255, 0, 0):Lerp(Color3.fromRGB(0, 255, 0), healthRatio)
        for _, line in pairs(library) do
            line.Color = color
        end
    end

    local function Updater()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("HumanoidRootPart") then
                local humanoid = plr.Character.Humanoid
                local HumPos, OnScreen = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if OnScreen then
                    local healthRatio = humanoid.Health / humanoid.MaxHealth
                    UpdateColor(healthRatio)

                    -- Obtener posiciones en pantalla para las partes del cuerpo
                    local head = plr.Character:FindFirstChild("Head")
                    local torso = plr.Character:FindFirstChild("UpperTorso") or plr.Character:FindFirstChild("Torso")
                    local leftLeg = plr.Character:FindFirstChild("LeftLeg") or plr.Character:FindFirstChild("LeftLowerLeg")
                    local rightLeg = plr.Character:FindFirstChild("RightLeg") or plr.Character:FindFirstChild("RightLowerLeg")

                    if head and torso and leftLeg and rightLeg then
                        -- Obtener posiciones en pantalla para las partes del cuerpo
                        local headPos = camera:WorldToViewportPoint(head.Position)
                        local torsoPos = camera:WorldToViewportPoint(torso.Position)
                        local leftLegPos = camera:WorldToViewportPoint(leftLeg.Position)
                        local rightLegPos = camera:WorldToViewportPoint(rightLeg.Position)

                        -- Ajustar líneas solo para el contorno de la silueta, alineado correctamente
                        local width = 15  -- Ancho del contorno
                        local heightOffset = 10 -- Offset para evitar líneas extrañas

                        -- Línea superior desde la cabeza
                        library.top.From = Vector2.new(headPos.X - width, headPos.Y - heightOffset)
                        library.top.To = Vector2.new(headPos.X + width, headPos.Y - heightOffset)

                        -- Línea inferior de las piernas
                        library.bottom.From = Vector2.new(leftLegPos.X - width, leftLegPos.Y + heightOffset)
                        library.bottom.To = Vector2.new(rightLegPos.X + width, rightLegPos.Y + heightOffset)

                        -- Línea izquierda desde la cabeza hasta la pierna izquierda
                        library.left.From = Vector2.new(headPos.X - width, headPos.Y - heightOffset)
                        library.left.To = Vector2.new(leftLegPos.X - width, leftLegPos.Y + heightOffset)

                        -- Línea derecha desde la cabeza hasta la pierna derecha
                        library.right.From = Vector2.new(headPos.X + width, headPos.Y - heightOffset)
                        library.right.To = Vector2.new(rightLegPos.X + width, rightLegPos.Y + heightOffset)

                        Visibility(true, library)
                    end
                else
                    Visibility(false, library)
                end
            else
                Visibility(false, library)
                if not game.Players:FindFirstChild(plr.Name) then
                    connection:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Updater)()
end

for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= player.Name then
        coroutine.wrap(ESP)(v)
    end
end

game.Players.PlayerAdded:Connect(function(newplr)
    if newplr.Name ~= player.Name then
        coroutine.wrap(ESP)(newplr)
    end
end)
