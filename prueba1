local Settings = {
    healthbar = true,  -- Opción para mostrar color según la vida
    ContourColor = Color3.fromRGB(255, 255, 255), -- Color del contorno (blanco)
    ContourThickness = 2 -- Grosor del contorno
}

local player = game:GetService("Players").LocalPlayer

-- Función para obtener el color basado en la vida del jugador
local function UpdateColor(healthRatio)
    return Color3.fromRGB(255, 0, 0):Lerp(Color3.fromRGB(0, 255, 0), healthRatio)
end

-- Función para aplicar el color y el contorno a cada parte del jugador
local function ApplyColorAndOutline(plr)
    local humanoid = plr.Character:FindFirstChild("Humanoid")
    if not humanoid then return end

    -- Función que actualiza el color y contorno de cada parte del personaje
    local function UpdateAppearance()
        if not Settings.healthbar then
            -- Si el healthbar está desactivado, restaurar colores originales
            for _, part in ipairs(plr.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Color = part.OriginalColor or part.Color
                    part.Transparency = part.OriginalTransparency or 0
                end
            end
            return
        end

        local healthRatio = humanoid.Health / humanoid.MaxHealth
        local color = UpdateColor(healthRatio)

        -- Cambiar el color de cada parte del personaje y aplicar transparencia para un efecto de opacidad
        for _, part in ipairs(plr.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part.OriginalColor = part.OriginalColor or part.Color -- Guardar el color original
                part.OriginalTransparency = part.OriginalTransparency or part.Transparency
                part.Color = color
                part.Transparency = 0.5  -- Ajusta la opacidad del personaje

                -- Crear el contorno usando un SurfaceGui
                local contour = part:FindFirstChild("Contour")
                if not contour then
                    contour = Instance.new("SurfaceGui")
                    contour.Name = "Contour"
                    contour.AlwaysOnTop = true
                    contour.Parent = part

                    for _, face in ipairs(Enum.NormalId:GetEnumItems()) do
                        local border = Instance.new("Frame")
                        border.Size = UDim2.new(1, Settings.ContourThickness, 1, Settings.ContourThickness)
                        border.BackgroundTransparency = 0.5
                        border.BackgroundColor3 = Settings.ContourColor
                        border.Parent = contour
                        border.ZIndex = 2
                    end
                end
            end
        end
    end

    -- Conectar al evento de cambio de vida del jugador
    local healthConnection = humanoid.HealthChanged:Connect(UpdateAppearance)

    -- Conectar al evento de render para asegurarse de que el contorno y el color se actualizan en tiempo real
    game:GetService("RunService").RenderStepped:Connect(function()
        if plr.Character then
            UpdateAppearance()
        end
    end)
end

-- Aplicar a todos los jugadores excepto el jugador local
for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= player.Name then
        coroutine.wrap(ApplyColorAndOutline)(v)
    end
end

game.Players.PlayerAdded:Connect(function(newplr)
    if newplr.Name ~= player.Name then
        coroutine.wrap(ApplyColorAndOutline)(newplr)
    end
end)
